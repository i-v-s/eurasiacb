/* Auto-generated by genmsg_cpp for file /home/vasiliy/svn/eurasiacb/projects/ros/qstab/msg/Num.msg */
#ifndef QSTAB_MESSAGE_NUM_H
#define QSTAB_MESSAGE_NUM_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace qstab
{
template <class ContainerAllocator>
struct Num_ : public ros::Message
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
  : horizontal(0)
  , vertical(0)
  {
  }

  Num_(const ContainerAllocator& _alloc)
  : horizontal(0)
  , vertical(0)
  {
  }

  typedef int32_t _horizontal_type;
  int32_t horizontal;

  typedef int32_t _vertical_type;
  int32_t vertical;


private:
  static const char* __s_getDataType_() { return "qstab/Num"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "811a705e34a03723eca077ed4732bcd1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 horizontal\n\
int32 vertical\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, horizontal);
    ros::serialization::serialize(stream, vertical);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, horizontal);
    ros::serialization::deserialize(stream, vertical);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(horizontal);
    size += ros::serialization::serializationLength(vertical);
    return size;
  }

  typedef boost::shared_ptr< ::qstab::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qstab::Num_<ContainerAllocator>  const> ConstPtr;
}; // struct Num
typedef  ::qstab::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::qstab::Num> NumPtr;
typedef boost::shared_ptr< ::qstab::Num const> NumConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::qstab::Num_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::qstab::Num_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace qstab

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::qstab::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "811a705e34a03723eca077ed4732bcd1";
  }

  static const char* value(const  ::qstab::Num_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x811a705e34a03723ULL;
  static const uint64_t static_value2 = 0xeca077ed4732bcd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::qstab::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "qstab/Num";
  }

  static const char* value(const  ::qstab::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::qstab::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 horizontal\n\
int32 vertical\n\
\n\
";
  }

  static const char* value(const  ::qstab::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::qstab::Num_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::qstab::Num_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.horizontal);
    stream.next(m.vertical);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Num_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qstab::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::qstab::Num_<ContainerAllocator> & v) 
  {
    s << indent << "horizontal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.horizontal);
    s << indent << "vertical: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vertical);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QSTAB_MESSAGE_NUM_H

